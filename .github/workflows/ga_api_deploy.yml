name: learn-github-actions

on: [push]

jobs:
  push-and-test:
    environment:
      name: production
    env:
      NAME: ${{secrets.NAME}}
      pg_oltp_api_db_test: ${{secrets.pg_oltp_api_db_test}}
      pg_oltp_api_user: ${{secrets.pg_oltp_api_user}}
      pg_oltp_api_password: ${{secrets.pg_oltp_api_password}}
      pg_oltp_api_host: ${{secrets.pg_oltp_api_host}}
      pg_oltp_api_port: ${{secrets.pg_oltp_api_port}}
      pg_oltp_api_db: ${{secrets.pg_oltp_api_db}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{secrets.pg_oltp_api_password}}
          POSTGRES_DB: ${{secrets.pg_oltp_api_db_test}}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: update pip
        # run: python -m pip install --upgrade pip
        run: pip install pipenv
      - name: dependencies
        run: |
          pipenv install
          pipenv install -r requirements.txt
      - name: pytests
        run: |
          pipenv install pytest
          pytest
      # optional docker config
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/gourmand-api:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/gourmand-api:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/gourmand-api:buildcache,mode=max
  # deployment:
  #   runs-on: ubuntu-latest
  #   needs: [push-and-test]
  #   steps:
  #     - name: deploying to ubuntu vm
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{secrets.pg_oltp_api_host}}
  #         username: ${{secrets.ubuntu_user}}
  #         password: ${{ secrets.UBUNTU_CONTRIBUTOR_PASS }}
  #         # perhaps attempt to set up ssh passphrase by placing private key in github repo (this seems not worth though )
  #         # passphrase : ${{secrets.UBUNTU_PASSPHRASE}}
  #         script: |
  #           cd gourmand-api/
  #           git pull
  #           echo ${{secrets.UBUNTU_CONTRIBUTOR_PASS}} | sudo -S systemctl restart gourmandapi.service
  deployment:
    environment:
      name: production
    env:
      NAME: ${{secrets.NAME}}
    runs-on: ubuntu-latest
    needs: [push-and-test]
    steps:
      - name: running docker-compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.pg_oltp_api_host}}
          username: ${{secrets.ubuntu_user}}
          password: ${{ secrets.UBUNTU_CONTRIBUTOR_PASS }}
          script: |
            cd gourmand-api/
            git pull 
            # seems this cmd is not needed
            gourmand-api-venv/bin/docker-compose down 
            docker rmi raindata5/gourmand-api
            gourmand-api-venv/bin/docker-compose pull gourmand-api
            gourmand-api-venv/bin/docker-compose --file docker-compose.yml up -d --build --remove-orphans
            docker images --quiet --filter=dangling=true | xargs --no-run-if-empty docker rmi

# make sure to do gourmand-api-venv/bin/docker-compose up -d for docker-compose
