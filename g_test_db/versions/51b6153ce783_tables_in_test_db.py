"""tables in test db

Revision ID: 51b6153ce783
Revises: 
Create Date: 2022-01-06 15:03:36.244780

"""
from sqlalchemy.sql import schema
from sqlalchemy.sql.expression import text
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '51b6153ce783'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('authuser',
    sa.Column('userid', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(length=60), nullable=False),
    sa.Column('password', sa.String(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('userid'),
    sa.UniqueConstraint('email'),
    schema='_Production'
    )
    op.create_table('user',
    sa.Column('userid', sa.INTEGER(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('userprofileurl', sa.VARCHAR(length=300), autoincrement=False, nullable=True),
    sa.Column('userimageurl', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('firstname', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('lastnameinitial', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('lasteditedwhen', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('userid', name='User2_pkey'),
    postgresql_ignore_search_path=False,
    schema='_Production'
    )
    op.create_table('transactiontype',
    sa.Column('transactionid', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('transactionname', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('lasteditedwhen', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('transactionid', name='transactiontype2_pkey'),
    sa.UniqueConstraint('transactionname', name='transactiontype2_transactionname_key'),
    schema='_Production'
    )
    op.create_table('country',
    sa.Column('countryid', sa.INTEGER(),sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('countryname', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('lasteditedwhen', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('countryid', name='country2_pkey'),
    sa.UniqueConstraint('countryname', name='country2_countryname_key'),
    postgresql_ignore_search_path=False,
    schema='_Production'
    )
    
    
    op.create_table('state',
    sa.Column('stateid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('statename', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('abrvstate', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('countryid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('lasteditedwhen', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['countryid'], ['_Production.country.countryid'], name='fk_state_country', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('stateid', name='pk_state_stateid'),
    schema='_Production'
    )
    
    op.create_table('paymentlevel',
    sa.Column('paymentlevelid', sa.INTEGER(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('paymentlevelsymbol', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('paymentlevelname', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('lasteditedwhen', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('paymentlevelid', name='PaymentLevel2_pkey'),
    schema='_Production'
    )
    op.create_table('eventcategory',
    sa.Column('eventcategoryid', sa.INTEGER(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('eventcategoryname', sa.VARCHAR(length=80), autoincrement=False, nullable=True),
    sa.Column('lasteditedwhen', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    schema='_Production'
    )
    op.create_table('county',
    sa.Column('countyid', sa.INTEGER(),sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('countyname', sa.VARCHAR(length=85), autoincrement=False, nullable=True),
    sa.Column('stateid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('lasteditedwhen', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['stateid'], ['_Production.state.stateid'], name='fk_county_state', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('countyid', name='County2_pkey'),
    schema='_Production'
    )
    op.create_table('city',
    sa.Column('cityid', sa.INTEGER(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('CityName', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('StateID', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('CountyID', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('LastEditedWhen', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('cityid', name='PK_City_cityid'),
    schema='_Production'
    )
    op.create_table('businesscategory',
    sa.Column('categoryid', sa.INTEGER(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('categoryname', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('lasteditedwhen', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('categoryid', name='BusinessCategory2_pkey'),
    schema='_Production'
    )
    op.create_table('business',
    sa.Column('businessid', sa.INTEGER(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('businessname', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('chainname', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('addressline1', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('addressline2', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('addressline3', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('latitude', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('longitude', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('zipcode', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('businessphone', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('businessurl', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('is_closed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('distancetocounty', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('cityid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('countyid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('stateid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('paymentlevelid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('lasteditedwhen', postgresql.TIMESTAMP(precision=6), autoincrement=False, nullable=True, server_default=text('now()')),
    sa.ForeignKeyConstraint(['cityid'], ['_Production.city.cityid'], name='fk_business_city', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['countyid'], ['_Production.county.countyid'], name='fk_business_county'),
    sa.ForeignKeyConstraint(['paymentlevelid'], ['_Production.paymentlevel.paymentlevelid'], name='fk_business_paymentlevel', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['stateid'], ['_Production.state.stateid'], name='fk_business_state'),
    sa.PrimaryKeyConstraint('businessid', name='Business2_pkey'),
    postgresql_ignore_search_path=False,
    schema='_Production'
    )
    op.create_index('ix_business_stateid', 'business', ['stateid'], unique=False, schema='_Production')
    op.create_index('ix_business_paymentlevelid', 'business', ['paymentlevelid'], unique=False, schema='_Production')
    op.create_index('ix_business_countyid', 'business', ['countyid'], unique=False, schema='_Production')
    op.create_index('ix_business_cityid', 'business', ['cityid'], unique=False, schema='_Production')
    op.create_index('ix_business_chainname', 'business', ['chainname'], unique=False, schema='_Production')
    # op.create_table('Business',
    # sa.Column('BusinessID', sa.INTEGER(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1), autoincrement=True, nullable=False),
    # sa.Column('BusinessName', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    # sa.Column('ChainName', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    # sa.Column('AddressLine1', sa.VARCHAR(length=150), autoincrement=False, nullable=True),
    # sa.Column('AddressLine2', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    # sa.Column('AddressLine3', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    # sa.Column('Latitude', sa.NUMERIC(precision=8, scale=6), autoincrement=False, nullable=True),
    # sa.Column('Longitude', sa.NUMERIC(precision=9, scale=6), autoincrement=False, nullable=True),
    # sa.Column('ZipCode', sa.VARCHAR(length=40), autoincrement=False, nullable=True),
    # sa.Column('BusinessPhone', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('BusinessURL', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    # sa.Column('is_closed', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('DistanceToCounty', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('cityid', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('CountyID', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('StateID', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('PaymentLevelID', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('LastEditedWhen', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    # sa.PrimaryKeyConstraint('BusinessID', name='PK_Business_BusinessID')
    # )
    op.create_table('countygrowth',
    sa.Column('CountyID', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('EstimationYear', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('EstimatedPopulation', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('LastEditedWhen', sa.DATE(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('CountyID', 'EstimationYear', name='PK_CountyGrowth_CountyID_EstimationYear'),
    schema='_Production'
    )
    op.create_table('businesscategorybridge',
    sa.Column('businessid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('categoryid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('lasteditedwhen', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['businessid'], ['_Production.business.businessid'], name='fk_businesscategorybridge_business', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['categoryid'], ['_Production.businesscategory.categoryid'], name='fk_businesscategorybridge_businesscategory', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('businessid', 'categoryid', name='pk_businesscategorybridge_businessid_categoryid'),
    schema='_Production'
    )
    # op.create_table('BusinessHolding',
    # sa.Column('BusinessHoldingID', sa.INTEGER(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1), autoincrement=True, nullable=False),
    # sa.Column('BusinessID', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('BusinessRating', sa.NUMERIC(precision=2, scale=1), autoincrement=False, nullable=True),
    # sa.Column('ReviewCount', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('CloseDate', sa.DATE(), autoincrement=False, nullable=False),
    # sa.PrimaryKeyConstraint('BusinessHoldingID', name='PK_BusinessHolding_BusinessHoldingID')
    # )
    op.create_table('businessholding',
    sa.Column('businessholdingid', sa.INTEGER(),sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('businessid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('businessrating', sa.NUMERIC(precision=2, scale=1), autoincrement=False, nullable=True),
    sa.Column('reviewcount', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('closedate', sa.DATE(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['businessid'], ['_Production.business.businessid'], name='fk_businessholding_business', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('businessholdingid', name='BusinessHolding2_pkey'),
    schema='_Production'
    )
    op.create_index('ix_businessholding_closedate', 'businessholding', ['closedate'], unique=False, schema='_Production')
    op.create_index('ix_businessholding_businessid', 'businessholding', ['businessid'], unique=False, schema='_Production')

    op.create_table('businesstransactionbridge',
    sa.Column('businessid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('transactionid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('lasteditedwhen', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['businessid'], ['_Production.business.businessid'], name='fk_businesstransactionbridge_business', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['transactionid'], ['_Production.transactiontype.transactionid'], name='fk_businesstransactionbridge_transactiontype', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('businessid', 'transactionid', name='pk_businesstransactionbridge_businessid_transactionid'),
    schema='_Production'
    )
    op.create_table('event',
    sa.Column('eventid', sa.INTEGER(),sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('businessid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('eventname', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('attending', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('costofattending', sa.NUMERIC(precision=16, scale=2), autoincrement=False, nullable=True),
    sa.Column('is_free', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('eventdescription', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('interested', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('cityid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('latitude', sa.NUMERIC(precision=8, scale=6), autoincrement=False, nullable=True),
    sa.Column('longitude', sa.NUMERIC(precision=9, scale=6), autoincrement=False, nullable=True),
    sa.Column('zipcode', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('starttime', postgresql.TIMESTAMP(timezone=True, precision=3), autoincrement=False, nullable=True),
    sa.Column('endtime', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('ticketsurl', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('eventsiteurl', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('canceldate', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('officialdate', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('createdat', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('lasteditedwhen', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['businessid'], ['_Production.business.businessid'], name='fk_event_business', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['cityid'], ['_Production.city.cityid'], name='fk_event_city'),
    sa.PrimaryKeyConstraint('eventid', name='Event2_pkey'),
    schema='_Production'
    )
    
    op.create_table('review',
    sa.Column('reviewid', sa.INTEGER(),sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('reviewurl', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('reviewextract', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('reviewrating', sa.NUMERIC(precision=28, scale=0), autoincrement=False, nullable=True),
    sa.Column('userid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('businessid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('createdat', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('insertedat', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['businessid'], ['_Production.business.businessid'], name='fk_review_business', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['userid'], ['_Production.user.userid'], name='fk_review_user', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('reviewid', name='Review2_pkey'),
    schema='_Production'
    )

    

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_businessholding_businessid', table_name='businessholding', schema='_Production')
    op.drop_index('ix_businessholding_closedate', table_name='businessholding', schema='_Production')
    op.drop_index('ix_business_chainname', table_name='business', schema='_Production')
    op.drop_index('ix_business_cityid', table_name='business', schema='_Production')
    op.drop_index('ix_business_countyid', table_name='business', schema='_Production')
    op.drop_index('ix_business_paymentlevelid', table_name='business', schema='_Production')
    op.drop_index('ix_business_stateid', table_name='business', schema='_Production')
    op.drop_table('review', schema='_Production')
    op.drop_table('event', schema='_Production')
    op.drop_table('businesstransactionbridge', schema='_Production')
    op.drop_table('businessholding', schema='_Production')
    op.drop_table('businesscategorybridge', schema='_Production')
    op.drop_table('countygrowth', schema='_Production')
    op.drop_table('business', schema='_Production')
    op.drop_table('businesscategory', schema='_Production')  
    op.drop_table('city', schema='_Production')
    op.drop_table('county', schema='_Production')
    op.drop_table('eventcategory', schema='_Production')
    op.drop_table('paymentlevel', schema='_Production')
    op.drop_table('state', schema='_Production')
    op.drop_table('country', schema='_Production')
    op.drop_table('transactiontype', schema='_Production')
    op.drop_table('user', schema='_Production')
    op.drop_table('authuser', schema='_Production')
    



    # op.drop_table('businessholding', schema='_Production')
    # op.drop_table('business', schema='_Production')
    # op.drop_table('authuser', schema='_Production')
    # ### end Alembic commands ###
