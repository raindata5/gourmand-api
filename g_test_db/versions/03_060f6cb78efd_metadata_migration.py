"""metadata migration

Revision ID: 060f6cb78efd
Revises: 56470f309b5f
Create Date: 2023-10-13 03:59:55.884675

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '060f6cb78efd'
down_revision = '56470f309b5f'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('authuser', 'email',
               existing_type=sa.TEXT(),
               type_=sa.String(length=80),
               existing_nullable=False,
               schema='_Production')
    op.alter_column('authuser', 'password',
               existing_type=sa.TEXT(),
               type_=sa.String(length=200),
               existing_nullable=False,
               schema='_Production')
    op.create_unique_constraint(None, 'authuser', ['email'], schema='_Production')
    op.alter_column('business', 'businessname',
               existing_type=sa.TEXT(),
               type_=sa.String(length=150),
               nullable=False,
               schema='_Production')
    op.alter_column('business', 'chainname',
               existing_type=sa.TEXT(),
               type_=sa.String(length=150),
               nullable=False,
               schema='_Production')
    op.alter_column('business', 'addressline1',
               existing_type=sa.TEXT(),
               type_=sa.String(length=150),
               nullable=True,
               schema='_Production')
    op.alter_column('business', 'addressline2',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=150),
               existing_nullable=True,
               schema='_Production')
    op.alter_column('business', 'addressline3',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=150),
               existing_nullable=True,
               schema='_Production')
    op.alter_column('business', 'is_closed',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               schema='_Production')
    op.alter_column('business', 'lasteditedwhen',
               existing_type=postgresql.TIMESTAMP(precision=6),
               nullable=False,
               schema='_Production')
    op.drop_constraint('fk_business_county', 'business', schema='_Production', type_='foreignkey')
    op.drop_constraint('fk_business_state', 'business', schema='_Production', type_='foreignkey')
    op.drop_constraint('fk_business_city', 'business', schema='_Production', type_='foreignkey')
    op.drop_constraint('fk_business_paymentlevel', 'business', schema='_Production', type_='foreignkey')
    # op.drop_column('business', 'validto', schema='_Production') # This was never created in test_db but only manually in PROD
    op.alter_column('businessholding', 'businessid',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='_Production')
    op.alter_column('businessholding', 'closedate',
               existing_type=sa.DATE(),
               nullable=False,
               schema='_Production')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('businessholding', 'closedate',
               existing_type=sa.DATE(),
               nullable=True,
               schema='_Production')
    op.alter_column('businessholding', 'businessid',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='_Production')
    op.add_column('business', sa.Column('validto', postgresql.TIMESTAMP(precision=6), autoincrement=False, nullable=True), schema='_Production')
    op.create_foreign_key('fk_business_paymentlevel', 'business', 'paymentlevel', ['paymentlevelid'], ['paymentlevelid'], source_schema='_Production', referent_schema='_Production', ondelete='CASCADE')
    op.create_foreign_key('fk_business_city', 'business', 'city', ['cityid'], ['cityid'], source_schema='_Production', referent_schema='_Production', ondelete='CASCADE')
    op.create_foreign_key('fk_business_state', 'business', 'state', ['stateid'], ['stateid'], source_schema='_Production', referent_schema='_Production')
    op.create_foreign_key('fk_business_county', 'business', 'county', ['countyid'], ['countyid'], source_schema='_Production', referent_schema='_Production')
    op.alter_column('business', 'lasteditedwhen',
               existing_type=postgresql.TIMESTAMP(precision=6),
               nullable=True,
               schema='_Production')
    op.alter_column('business', 'is_closed',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               schema='_Production')
    op.alter_column('business', 'addressline3',
               existing_type=sa.String(length=150),
               type_=sa.VARCHAR(length=100),
               existing_nullable=True,
               schema='_Production')
    op.alter_column('business', 'addressline2',
               existing_type=sa.String(length=150),
               type_=sa.VARCHAR(length=100),
               existing_nullable=True,
               schema='_Production')
    op.alter_column('business', 'addressline1',
               existing_type=sa.String(length=150),
               type_=sa.TEXT(),
               nullable=True,
               schema='_Production')
    op.alter_column('business', 'chainname',
               existing_type=sa.String(length=150),
               type_=sa.TEXT(),
               nullable=True,
               schema='_Production')
    op.alter_column('business', 'businessname',
               existing_type=sa.String(length=150),
               type_=sa.TEXT(),
               nullable=True,
               schema='_Production')
    op.drop_constraint(None, 'authuser', schema='_Production', type_='unique')
    op.alter_column('authuser', 'password',
               existing_type=sa.String(length=200),
               type_=sa.TEXT(),
               existing_nullable=False,
               schema='_Production')
    op.alter_column('authuser', 'email',
               existing_type=sa.String(length=80),
               type_=sa.TEXT(),
               existing_nullable=False,
               schema='_Production')
    # ### end Alembic commands ###
